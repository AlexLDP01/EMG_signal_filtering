// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FIR_filter_FIR_filter_Pipeline_total (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lhs_V_reload,
        lhs_V_1_reload,
        lhs_V_2_reload,
        lhs_V_3_reload,
        total_V_2_out,
        total_V_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] lhs_V_reload;
input  [31:0] lhs_V_1_reload;
input  [31:0] lhs_V_2_reload;
input  [31:0] lhs_V_3_reload;
output  [31:0] total_V_2_out;
output   total_V_2_out_ap_vld;

reg ap_idle;
reg total_V_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln58_fu_106_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] lhs_V_fu_54;
wire   [31:0] total_V_fu_197_p3;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [2:0] i_fu_58;
wire   [2:0] add_ln58_fu_112_p2;
wire    ap_block_pp0_stage0_01001;
wire  signed [31:0] sext_ln813_fu_121_p0;
wire   [1:0] rhs_fu_129_p5;
wire  signed [31:0] rhs_fu_129_p6;
wire  signed [32:0] sext_ln813_1_fu_139_p1;
wire  signed [32:0] sext_ln813_fu_121_p1;
wire   [32:0] ret_V_fu_143_p2;
wire  signed [31:0] p_Val2_1_fu_157_p1;
wire   [31:0] p_Val2_1_fu_157_p2;
wire   [0:0] p_Result_s_fu_149_p3;
wire   [0:0] p_Result_1_fu_163_p3;
wire   [0:0] xor_ln895_fu_171_p2;
wire   [0:0] overflow_fu_177_p2;
wire   [0:0] xor_ln302_fu_183_p2;
wire   [31:0] select_ln346_fu_189_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

FIR_filter_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U84(
    .din0(lhs_V_reload),
    .din1(lhs_V_1_reload),
    .din2(lhs_V_2_reload),
    .din3(lhs_V_3_reload),
    .din4(rhs_fu_129_p5),
    .dout(rhs_fu_129_p6)
);

FIR_filter_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 3'd0;
        end else if (((icmp_ln58_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_58 <= add_ln58_fu_112_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            lhs_V_fu_54 <= 32'd0;
        end else if (((icmp_ln58_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            lhs_V_fu_54 <= total_V_fu_197_p3;
        end
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_106_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_106_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        total_V_2_out_ap_vld = 1'b1;
    end else begin
        total_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln58_fu_112_p2 = (i_fu_58 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign icmp_ln58_fu_106_p2 = ((i_fu_58 == 3'd4) ? 1'b1 : 1'b0);

assign overflow_fu_177_p2 = (xor_ln895_fu_171_p2 & p_Result_1_fu_163_p3);

assign p_Result_1_fu_163_p3 = p_Val2_1_fu_157_p2[32'd31];

assign p_Result_s_fu_149_p3 = ret_V_fu_143_p2[32'd32];

assign p_Val2_1_fu_157_p1 = lhs_V_fu_54;

assign p_Val2_1_fu_157_p2 = ($signed(rhs_fu_129_p6) + $signed(p_Val2_1_fu_157_p1));

assign ret_V_fu_143_p2 = ($signed(sext_ln813_1_fu_139_p1) + $signed(sext_ln813_fu_121_p1));

assign rhs_fu_129_p5 = i_fu_58[1:0];

assign select_ln346_fu_189_p3 = ((overflow_fu_177_p2[0:0] == 1'b1) ? 32'd2147483647 : 32'd2147483648);

assign sext_ln813_1_fu_139_p1 = rhs_fu_129_p6;

assign sext_ln813_fu_121_p0 = lhs_V_fu_54;

assign sext_ln813_fu_121_p1 = sext_ln813_fu_121_p0;

assign total_V_2_out = lhs_V_fu_54;

assign total_V_fu_197_p3 = ((xor_ln302_fu_183_p2[0:0] == 1'b1) ? select_ln346_fu_189_p3 : p_Val2_1_fu_157_p2);

assign xor_ln302_fu_183_p2 = (p_Result_s_fu_149_p3 ^ p_Result_1_fu_163_p3);

assign xor_ln895_fu_171_p2 = (p_Result_s_fu_149_p3 ^ 1'd1);

endmodule //FIR_filter_FIR_filter_Pipeline_total
