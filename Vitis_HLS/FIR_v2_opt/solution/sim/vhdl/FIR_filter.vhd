-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FIR_filter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_in_stream_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    data_in_stream_TVALID : IN STD_LOGIC;
    data_in_stream_TREADY : OUT STD_LOGIC;
    data_out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_stream_TVALID : OUT STD_LOGIC;
    data_out_stream_TREADY : IN STD_LOGIC );
end;


architecture behav of FIR_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FIR_filter_FIR_filter,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.298600,HLS_SYN_LAT=141,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=310,HLS_SYN_LUT=657,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fir_shift_reg_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal fir_shift_reg_V_ce0 : STD_LOGIC;
    signal fir_shift_reg_V_we0 : STD_LOGIC;
    signal fir_shift_reg_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal fir_shift_reg_V_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal fir_shift_reg_V_ce1 : STD_LOGIC;
    signal fir_shift_reg_V_we1 : STD_LOGIC;
    signal fir_shift_reg_V_q1 : STD_LOGIC_VECTOR (23 downto 0);
    signal data_in_stream_TDATA_blk_n : STD_LOGIC;
    signal data_out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal data_in_stream_read_reg_100 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_start : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_done : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_idle : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_ready : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_ce0 : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_we0 : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_d0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_ce1 : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_we1 : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_d1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_start : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_done : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_idle : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_ready : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_acum_V_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_acum_V_2_out_ap_vld : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_fir_shift_reg_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_fir_shift_reg_V_ce0 : STD_LOGIC;
    signal grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call6 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal regslice_both_data_out_stream_U_apdone_blk : STD_LOGIC;
    signal ap_block_state7 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal regslice_both_data_in_stream_U_apdone_blk : STD_LOGIC;
    signal data_in_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal data_in_stream_TVALID_int_regslice : STD_LOGIC;
    signal data_in_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_data_in_stream_U_ack_in : STD_LOGIC;
    signal data_out_stream_TVALID_int_regslice : STD_LOGIC;
    signal data_out_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_data_out_stream_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component FIR_filter_FIR_filter_Pipeline_shift_reg IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fir_shift_reg_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        fir_shift_reg_V_ce0 : OUT STD_LOGIC;
        fir_shift_reg_V_we0 : OUT STD_LOGIC;
        fir_shift_reg_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        fir_shift_reg_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
        fir_shift_reg_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        fir_shift_reg_V_ce1 : OUT STD_LOGIC;
        fir_shift_reg_V_we1 : OUT STD_LOGIC;
        fir_shift_reg_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        fir_shift_reg_V_q1 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FIR_filter_FIR_filter_Pipeline_VITIS_LOOP_31_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        acum_V_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        acum_V_2_out_ap_vld : OUT STD_LOGIC;
        fir_shift_reg_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        fir_shift_reg_V_ce0 : OUT STD_LOGIC;
        fir_shift_reg_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FIR_filter_fir_shift_reg_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (23 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (23 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component FIR_filter_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    fir_shift_reg_V_U : component FIR_filter_fir_shift_reg_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 24,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fir_shift_reg_V_address0,
        ce0 => fir_shift_reg_V_ce0,
        we0 => fir_shift_reg_V_we0,
        d0 => fir_shift_reg_V_d0,
        q0 => fir_shift_reg_V_q0,
        address1 => grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_address1,
        ce1 => fir_shift_reg_V_ce1,
        we1 => fir_shift_reg_V_we1,
        d1 => grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_d1,
        q1 => fir_shift_reg_V_q1);

    grp_FIR_filter_Pipeline_shift_reg_fu_69 : component FIR_filter_FIR_filter_Pipeline_shift_reg
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_start,
        ap_done => grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_done,
        ap_idle => grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_idle,
        ap_ready => grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_ready,
        fir_shift_reg_V_address0 => grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_address0,
        fir_shift_reg_V_ce0 => grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_ce0,
        fir_shift_reg_V_we0 => grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_we0,
        fir_shift_reg_V_d0 => grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_d0,
        fir_shift_reg_V_q0 => fir_shift_reg_V_q0,
        fir_shift_reg_V_address1 => grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_address1,
        fir_shift_reg_V_ce1 => grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_ce1,
        fir_shift_reg_V_we1 => grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_we1,
        fir_shift_reg_V_d1 => grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_d1,
        fir_shift_reg_V_q1 => fir_shift_reg_V_q1);

    grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75 : component FIR_filter_FIR_filter_Pipeline_VITIS_LOOP_31_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_start,
        ap_done => grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_done,
        ap_idle => grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_idle,
        ap_ready => grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_ready,
        acum_V_2_out => grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_acum_V_2_out,
        acum_V_2_out_ap_vld => grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_acum_V_2_out_ap_vld,
        fir_shift_reg_V_address0 => grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_fir_shift_reg_V_address0,
        fir_shift_reg_V_ce0 => grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_fir_shift_reg_V_ce0,
        fir_shift_reg_V_q0 => fir_shift_reg_V_q0);

    regslice_both_data_in_stream_U : component FIR_filter_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => data_in_stream_TDATA,
        vld_in => data_in_stream_TVALID,
        ack_in => regslice_both_data_in_stream_U_ack_in,
        data_out => data_in_stream_TDATA_int_regslice,
        vld_out => data_in_stream_TVALID_int_regslice,
        ack_out => data_in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_data_in_stream_U_apdone_blk);

    regslice_both_data_out_stream_U : component FIR_filter_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_acum_V_2_out,
        vld_in => data_out_stream_TVALID_int_regslice,
        ack_in => data_out_stream_TREADY_int_regslice,
        data_out => data_out_stream_TDATA,
        vld_out => regslice_both_data_out_stream_U_vld_out,
        ack_out => data_out_stream_TREADY,
        apdone_blk => regslice_both_data_out_stream_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_ready = ap_const_logic_1)) then 
                    grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((data_in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_ready = ap_const_logic_1)) then 
                    grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                data_in_stream_read_reg_100 <= data_in_stream_TDATA_int_regslice;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_done, grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state5, regslice_both_data_out_stream_U_apdone_blk, data_in_stream_TVALID_int_regslice, data_out_stream_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((data_in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((data_out_stream_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((data_out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_data_out_stream_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, data_in_stream_TVALID_int_regslice)
    begin
        if (((data_in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_done)
    begin
        if ((grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_done)
    begin
        if ((grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(data_out_stream_TREADY_int_regslice)
    begin
        if ((data_out_stream_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(regslice_both_data_out_stream_U_apdone_blk, data_out_stream_TREADY_int_regslice)
    begin
        if (((data_out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_data_out_stream_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, data_in_stream_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((data_in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call6_assign_proc : process(ap_start, data_in_stream_TVALID_int_regslice)
    begin
                ap_block_state1_ignore_call6 <= ((data_in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(regslice_both_data_out_stream_U_apdone_blk, data_out_stream_TREADY_int_regslice)
    begin
                ap_block_state7 <= ((data_out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_data_out_stream_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state7, regslice_both_data_out_stream_U_apdone_blk, data_out_stream_TREADY_int_regslice)
    begin
        if ((not(((data_out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_data_out_stream_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, regslice_both_data_out_stream_U_apdone_blk, data_out_stream_TREADY_int_regslice)
    begin
        if ((not(((data_out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_data_out_stream_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    data_in_stream_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, data_in_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            data_in_stream_TDATA_blk_n <= data_in_stream_TVALID_int_regslice;
        else 
            data_in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_in_stream_TREADY <= regslice_both_data_in_stream_U_ack_in;

    data_in_stream_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, data_in_stream_TVALID_int_regslice)
    begin
        if ((not(((data_in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            data_in_stream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            data_in_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    data_out_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, data_out_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            data_out_stream_TDATA_blk_n <= data_out_stream_TREADY_int_regslice;
        else 
            data_out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_out_stream_TVALID <= regslice_both_data_out_stream_U_vld_out;

    data_out_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state6, data_out_stream_TREADY_int_regslice)
    begin
        if (((data_out_stream_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            data_out_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            data_out_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    fir_shift_reg_V_address0_assign_proc : process(grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_address0, grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_fir_shift_reg_V_address0, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fir_shift_reg_V_address0 <= ap_const_lv6_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fir_shift_reg_V_address0 <= grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_fir_shift_reg_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir_shift_reg_V_address0 <= grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_address0;
        else 
            fir_shift_reg_V_address0 <= "XXXXXX";
        end if; 
    end process;


    fir_shift_reg_V_ce0_assign_proc : process(grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_ce0, grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_fir_shift_reg_V_ce0, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fir_shift_reg_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            fir_shift_reg_V_ce0 <= grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_fir_shift_reg_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir_shift_reg_V_ce0 <= grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_ce0;
        else 
            fir_shift_reg_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_shift_reg_V_ce1_assign_proc : process(grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir_shift_reg_V_ce1 <= grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_ce1;
        else 
            fir_shift_reg_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fir_shift_reg_V_d0_assign_proc : process(data_in_stream_read_reg_100, grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_d0, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fir_shift_reg_V_d0 <= data_in_stream_read_reg_100;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir_shift_reg_V_d0 <= grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_d0;
        else 
            fir_shift_reg_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fir_shift_reg_V_we0_assign_proc : process(grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_we0, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fir_shift_reg_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir_shift_reg_V_we0 <= grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_we0;
        else 
            fir_shift_reg_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_shift_reg_V_we1_assign_proc : process(grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_we1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir_shift_reg_V_we1 <= grp_FIR_filter_Pipeline_shift_reg_fu_69_fir_shift_reg_V_we1;
        else 
            fir_shift_reg_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_start <= grp_FIR_filter_Pipeline_VITIS_LOOP_31_1_fu_75_ap_start_reg;
    grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_start <= grp_FIR_filter_Pipeline_shift_reg_fu_69_ap_start_reg;
end behav;
