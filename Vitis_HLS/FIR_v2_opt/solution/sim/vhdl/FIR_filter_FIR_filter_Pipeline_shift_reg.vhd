-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FIR_filter_FIR_filter_Pipeline_shift_reg is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fir_shift_reg_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    fir_shift_reg_V_ce0 : OUT STD_LOGIC;
    fir_shift_reg_V_we0 : OUT STD_LOGIC;
    fir_shift_reg_V_d0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    fir_shift_reg_V_q0 : IN STD_LOGIC_VECTOR (23 downto 0);
    fir_shift_reg_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    fir_shift_reg_V_ce1 : OUT STD_LOGIC;
    fir_shift_reg_V_we1 : OUT STD_LOGIC;
    fir_shift_reg_V_d1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    fir_shift_reg_V_q1 : IN STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of FIR_filter_FIR_filter_Pipeline_shift_reg is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal icmp_ln21_reg_192 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_85 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal reg_90 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_1_reg_167 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal fir_shift_reg_V_addr_reg_174 : STD_LOGIC_VECTOR (5 downto 0);
    signal fir_shift_reg_V_addr_2_reg_180 : STD_LOGIC_VECTOR (5 downto 0);
    signal fir_shift_reg_V_addr_3_reg_186 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln21_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln23_fu_109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_2_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_3_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_32 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_3_fu_141_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_fu_103_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_1_fu_114_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_2_fu_125_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component FIR_filter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component FIR_filter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_32_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                i_fu_32 <= ap_const_lv6_3F;
            elsif (((icmp_ln21_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_32 <= add_ln23_3_fu_141_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                fir_shift_reg_V_addr_2_reg_180 <= zext_ln23_1_fu_120_p1(6 - 1 downto 0);
                fir_shift_reg_V_addr_reg_174 <= zext_ln23_fu_109_p1(6 - 1 downto 0);
                i_1_reg_167 <= ap_sig_allocacmp_i_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                fir_shift_reg_V_addr_3_reg_186 <= zext_ln23_2_fu_130_p1(6 - 1 downto 0);
                icmp_ln21_reg_192 <= icmp_ln21_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_85 <= fir_shift_reg_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln21_reg_192 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then
                reg_90 <= fir_shift_reg_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln23_1_fu_114_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv6_3E));
    add_ln23_2_fu_125_p2 <= std_logic_vector(unsigned(i_1_reg_167) + unsigned(ap_const_lv6_3D));
    add_ln23_3_fu_141_p2 <= std_logic_vector(unsigned(i_1_reg_167) + unsigned(ap_const_lv6_3C));
    add_ln23_fu_103_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv6_3F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_CS_fsm_state4, icmp_ln21_reg_192)
    begin
        if (((icmp_ln21_reg_192 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state4, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_state1, i_fu_32, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv6_3F;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_32;
        end if; 
    end process;


    fir_shift_reg_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln21_reg_192, ap_CS_fsm_state2, ap_CS_fsm_state3, fir_shift_reg_V_addr_reg_174, fir_shift_reg_V_addr_3_reg_186, icmp_ln21_fu_135_p2, zext_ln23_1_fu_120_p1, zext_ln23_3_fu_146_p1)
    begin
        if (((icmp_ln21_reg_192 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            fir_shift_reg_V_address0 <= fir_shift_reg_V_addr_3_reg_186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fir_shift_reg_V_address0 <= fir_shift_reg_V_addr_reg_174;
        elsif (((icmp_ln21_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            fir_shift_reg_V_address0 <= zext_ln23_3_fu_146_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fir_shift_reg_V_address0 <= zext_ln23_1_fu_120_p1(6 - 1 downto 0);
        else 
            fir_shift_reg_V_address0 <= "XXXXXX";
        end if; 
    end process;


    fir_shift_reg_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, fir_shift_reg_V_addr_2_reg_180, zext_ln23_fu_109_p1, zext_ln23_2_fu_130_p1, i_cast_fu_156_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            fir_shift_reg_V_address1 <= fir_shift_reg_V_addr_2_reg_180;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fir_shift_reg_V_address1 <= i_cast_fu_156_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            fir_shift_reg_V_address1 <= zext_ln23_2_fu_130_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fir_shift_reg_V_address1 <= zext_ln23_fu_109_p1(6 - 1 downto 0);
        else 
            fir_shift_reg_V_address1 <= "XXXXXX";
        end if; 
    end process;


    fir_shift_reg_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, icmp_ln21_reg_192, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln21_fu_135_p2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln21_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln21_reg_192 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            fir_shift_reg_V_ce0 <= ap_const_logic_1;
        else 
            fir_shift_reg_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_shift_reg_V_ce1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            fir_shift_reg_V_ce1 <= ap_const_logic_1;
        else 
            fir_shift_reg_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    fir_shift_reg_V_d0 <= reg_90;
    fir_shift_reg_V_d1 <= reg_85;

    fir_shift_reg_V_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln21_reg_192, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln21_reg_192 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            fir_shift_reg_V_we0 <= ap_const_logic_1;
        else 
            fir_shift_reg_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fir_shift_reg_V_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            fir_shift_reg_V_we1 <= ap_const_logic_1;
        else 
            fir_shift_reg_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_cast_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_167),64));
    icmp_ln21_fu_135_p2 <= "1" when (add_ln23_2_fu_125_p2 = ap_const_lv6_0) else "0";
    zext_ln23_1_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_1_fu_114_p2),64));
    zext_ln23_2_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_2_fu_125_p2),64));
    zext_ln23_3_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_3_fu_141_p2),64));
    zext_ln23_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_103_p2),64));
end behav;
